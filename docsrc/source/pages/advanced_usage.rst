==============
Advanced Usage
==============

A set of options is available in order to adapt the report generated.

General settings
----------------

.. csv-table::
   :file: config_general.csv
   :widths: 30, 200, 200, 200
   :header-rows: 1

The configuration can be changed in the following ways:

.. code-block:: python
   :caption: Configuration example

    # Change the config when creating the report
    profile = df.profile_report(title="Pandas Profiling Report", pool_size=1)

    # Change the config after
    profile.config.html.minify_html = False

    profile.to_file("output.html")

Variable summary settings
-------------------------

.. csv-table::
   :file: config_variables.csv
   :widths: 30, 200, 200, 200
   :header-rows: 1


.. code-block:: python
  :caption: Configuration example

  profile = df.profile_report(
      sort="ascending",
      vars={
          "num": {"low_categorical_threshold": 0},
          "cat": {
              "length": True,
              "characters": False,
              "words": False,
              "n_obs": 5,
          },
      },
  )

  profile.config.variables.descriptions = {
      "files": "Files in the filesystem",
      "datec": "Creation date",
      "datem": "Modification date",
  }

  profile.to_file("report.html")


Missing data overview plots
---------------------------

.. csv-table::
   :file: config_missing.csv
   :widths: 30, 200, 200, 200
   :header-rows: 1

.. code-block:: python
  :caption: Configuration example: disable heatmap and dendrogram for large datasets

  profile = df.profile_report(
      missing_diagrams={
          "heatmap": False,
          "dendrogram": False,
      }
  )
  profile.to_file("report.html")

The missing data diagrams are generated by the `missingno <https://github.com/ResidentMario/missingno>`_ package.

Correlations
------------

.. csv-table::
   :file: config_correlations.csv
   :widths: 30, 200, 200, 200
   :header-rows: 1

Disable all correlations:

.. code-block:: python

    profile = df.profile_report(
        title="Report without correlations",
        correlations={
            "pearson": {"calculate": False},
            "spearman": {"calculate": False},
            "kendall": {"calculate": False},
            "phi_k": {"calculate": False},
            "cramers": {"calculate": False},
        },
    )

    # or using a shorthand that is available for correlations
    profile = df.profile_report(
        title="Report without correlations",
        correlations=None,
    )

Interactions
------------

.. csv-table::
   :file: config_interactions.csv
   :widths: 30, 200, 200, 200
   :header-rows: 1

The HTML Report
---------------

.. csv-table::
   :file: config_html.csv
   :widths: 30, 200, 200, 200
   :header-rows: 1

Using a custom configuration file
---------------------------------

To set the configuration of pandas-profiling using a custom file, you can start one of the sample configuration files below.
Then, change the configuration to your liking.

.. code-block:: python

  from pandas_profiling import ProfileReport

  profile = ProfileReport(df, config_file="your_config.yml")
  profile.to_file("report.html")

Sample configuration files
--------------------------
A great way to get an overview of the possible configuration is to look through sample configuration files.
The repository contains the following files:

- `default configuration file <https://github.com/pandas-profiling/pandas-profiling/blob/master/src/pandas_profiling/config_default.yaml>`_ (default),
- `minimal configuration file <https://github.com/pandas-profiling/pandas-profiling/blob/master/src/pandas_profiling/config_minimal.yaml>`_ (minimal computation, optimized for performance)

Configuration shorthands
------------------------

It's possible to disable certain groups of features through configuration shorthands.

.. code-block:: python

    # Disable samples, correlations, missing diagrams and duplicates at once
    r = ProfileReport(
        samples=None,
        correlations=None,
        missing_diagrams=None,
        duplicates=None,
        interactions=None,
    )


Customise plots
---------------
A way how to pass arguments to the underlying matplotlib is to use the ``plot`` argument. It is possible to change the default format of images to png (default svg) using the key-pair ``image_format: "png"`` and also the resolution of the image using ``dpi: 800``.
An example would be:

.. code-block:: python

    profile = ProfileReport(
        planets,
        title="Pandas Profiling Report",
        explorative=True,
        plot={"dpi": 200, "image_format": "png"},
    )

Customise correlation matrix
-----------------------------
It's possible to directly access the correlation matrix as well.
That is done with the ``plot`` argument and then with the ``correlation`` key.
It is possible to customise the palette, one can use the following list used in seaborn or create `their own custom matplotlib palette <https://matplotlib.org/stable/gallery/color/custom_cmap.html>`_.
Supported values are:

'Accent', 'Accent_r', 'Blues', 'Blues_r', 'BrBG', 'BrBG_r', 'BuGn', 'BuGn_r', 'BuPu', 'BuPu_r', 'CMRmap', 'CMRmap_r', 'Dark2', 'Dark2_r', 'GnBu', 'GnBu_r', 'Greens', 'Greens_r', 'Greys', 'Greys_r', 'OrRd', 'OrRd_r', 'Oranges', 'Oranges_r', 'PRGn', 'PRGn_r', 'Paired', 'Paired_r', 'Pastel1', 'Pastel1_r', 'Pastel2', 'Pastel2_r', 'PiYG', 'PiYG_r', 'PuBu', 'PuBuGn', 'PuBuGn_r', 'PuBu_r', 'PuOr', 'PuOr_r', 'PuRd', 'PuRd_r', 'Purples', 'Purples_r', 'RdBu', 'RdBu_r', 'RdGy', 'RdGy_r', 'RdPu', 'RdPu_r', 'RdYlBu', 'RdYlBu_r', 'RdYlGn', 'RdYlGn_r', 'Reds', 'Reds_r', 'Set1', 'Set1_r', 'Set2', 'Set2_r', 'Set3', 'Set3_r', 'Spectral', 'Spectral_r', 'Wistia', 'Wistia_r', 'YlGn', 'YlGnBu', 'YlGnBu_r', 'YlGn_r', 'YlOrBr', 'YlOrBr_r', 'YlOrRd', 'YlOrRd_r', 'afmhot', 'afmhot_r', 'autumn', 'autumn_r', 'binary', 'binary_r', 'bone', 'bone_r', 'brg', 'brg_r', 'bwr', 'bwr_r', 'cividis', 'cividis_r', 'cool', 'cool_r', 'coolwarm', 'coolwarm_r', 'copper', 'copper_r', 'crest', 'crest_r', 'cubehelix', 'cubehelix_r', 'flag', 'flag_r', 'flare', 'flare_r', 'gist_earth', 'gist_earth_r', 'gist_gray', 'gist_gray_r', 'gist_heat', 'gist_heat_r', 'gist_ncar', 'gist_ncar_r', 'gist_rainbow', 'gist_rainbow_r', 'gist_stern', 'gist_stern_r', 'gist_yarg', 'gist_yarg_r', 'gnuplot', 'gnuplot2', 'gnuplot2_r', 'gnuplot_r', 'gray', 'gray_r', 'hot', 'hot_r', 'hsv', 'hsv_r', 'icefire', 'icefire_r', 'inferno', 'inferno_r', 'jet', 'jet_r', 'magma', 'magma_r', 'mako', 'mako_r', 'nipy_spectral', 'nipy_spectral_r', 'ocean', 'ocean_r', 'pink', 'pink_r', 'plasma', 'plasma_r', 'prism', 'prism_r', 'rainbow', 'rainbow_r', 'rocket', 'rocket_r', 'seismic', 'seismic_r', 'spring', 'spring_r', 'summer', 'summer_r', 'tab10', 'tab10_r', 'tab20', 'tab20_r', 'tab20b', 'tab20b_r', 'tab20c', 'tab20c_r', 'terrain', 'terrain_r', 'turbo', 'turbo_r', 'twilight', 'twilight_r', 'twilight_shifted', 'twilight_shifted_r', 'viridis', 'viridis_r', 'vlag', 'vlag_r', 'winter', 'winter_r'


An example can be:

.. code-block:: python

  from pandas_profiling import ProfileReport

  profile = ProfileReport(
      df,
      title="Pandas Profiling Report",
      explorative=True,
      plot={"correlation": {"cmap": "RdBu_r", "bad": "#000000"}},
  )

Similarly, one can change the palette for *Missing values* using the ``missing`` argument, eg:

.. code-block:: python

  from pandas_profiling import ProfileReport

  profile = ProfileReport(
      df,
      title="Pandas Profiling Report",
      explorative=True,
      plot={"missing": {"cmap": "RdBu_r"}},
  )

Multiple runs
-------------
The ProfileReport caches intermediary results for improved performance.
For rendering both the HTMl report write the statistics as a JSON file will reuse the same computations.
If you modify the configuration in between runs, you should either create a new ``ProfileReport`` object or invalidate the relevant cached values.
If the config for only the HTML report is changed (for instance you would like to tune the theme), then you only need to reset the cached HTML report.
You can use the ``report.invalidate_cache()`` method for this.
Passing the values "rendering" only resets previously rendered reports (HTML, JSON or widgets).
Alternatively "report" also resets the report structure.
