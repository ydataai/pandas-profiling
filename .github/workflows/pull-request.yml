name: Pull Request


on:
  push:
    branches:
    - renovate/**
  pull_request:

jobs:
  commitlint:
    name: Lint commit message
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3
      with:
        fetch-depth: 0

    - uses: wagoid/commitlint-github-action@v5
    
  lint:
    if: github.actor != 'renovate[bot]'
    name: Lint source code
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3
      with:
        fetch-depth: 0

    - name: Configurating Git
      run: |
        git config user.email "azory@ydata.ai"
        git config user.name "Azory YData Bot"
        git config core.autocrlf false

    - name: Set up Python 3.8
      uses: actions/setup-python@v4
      with:
        python-version: 3.8

    - uses: actions/cache@v3
      name: Cache pip dependencies
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('requirements*.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install pip dependencies
      run: |
        python -m pip install --upgrade pip
        python -m pip install -r requirements.txt
        python -m pip install -r requirements-dev.txt
        python -m pip install -r requirements-test.txt

    - name: Install the package
      run: make install

    - name: Validate code formatting
      run: make lint

    - name: Commit code formatting changes
      if: always()
      id: commit
      run: |
        if [[ `git status --porcelain --untracked-files=no` ]]; then
          echo "CHANGES=true" >> $GITHUB_OUTPUT
          git add -u
          git commit -m "[skip ci] Code formatting" -a
        else
          echo "CHANGES=false" >> $GITHUB_OUTPUT
        fi

    - name: Push changes
      uses: ad-m/github-push-action@v0.6.0
      if: always() && steps.commit.outputs.CHANGES == 'true'
      with:
        branch: ${{ github.head_ref }}
        github_token: ${{ secrets.ACCESS_TOKEN }}
